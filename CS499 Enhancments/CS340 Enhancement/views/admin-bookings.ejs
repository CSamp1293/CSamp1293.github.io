<!DOCTYPE html>
<html>
<head>
  <title>View Bookings</title>
  <link rel="stylesheet" href="/styles.css" />
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1em;
    }

    th, td {
      padding: 0.5em;
      border: 1px solid #ccc;
      text-align: left;
    }

    button {
      margin-right: 0.5em;
      cursor: pointer;
      background-color: #c0392b;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 3px;
      font-weight: bold;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: #922b21;
    }

    #paginationControls {
      display: flex;
      justify-content: center;
      gap: 2px;
      font-family: Arial, sans-serif;
      font-size: 0.75rem;
      user-select: none;
      margin: 0.75em auto 1em auto;
      max-width: fit-content;
      padding: 0;
    }

    #paginationControls button {
      background: none;
      border: none;
      color: #555;
      padding: 2px 5px;
      cursor: pointer;
      border-radius: 2px;
      min-width: 22px;
      line-height: 1.1;
      font-weight: 400;
      transition: color 0.2s ease;
    }

    #paginationControls button:hover:not(:disabled),
    #paginationControls button:focus:not(:disabled) {
      color: #111;
      outline: none;
      text-decoration: underline;
    }

    #paginationControls button:disabled {
      cursor: default;
      color: #bbb;
    }

    #paginationControls button.active-page {
      font-weight: 700;
      color: #000;
      cursor: default;
      text-decoration: underline;
      pointer-events: none;
    }

    #paginationControls .ellipsis {
      padding: 0 3px;
      color: #999;
      line-height: 24px;
      user-select: none;
    }

    #searchInput {
      margin-top: 1em;
      padding: 5px;
      width: 300px;
      font-size: 1rem;
    }
  </style>
</head>
<body>
  <h2>View Bookings</h2>

  <input type="text" id="searchInput" placeholder="Search bookings by customer or flight..." aria-label="Search bookings" />

  <table aria-label="Bookings Table">
    <thead>
      <tr>
        <th>Customer Name</th>
        <th>Flight Number</th>
        <th>Origin</th>
        <th>Destination</th>
        <th>Departure Time</th>
        <th>Seats Booked</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="bookingsTableBody">
      <!-- Bookings rows will be populated here by JS -->
    </tbody>
  </table>

  <div id="paginationControls" aria-label="Pagination navigation" role="navigation"></div>

  <script>
    const bookingsTableBody = document.getElementById('bookingsTableBody');
    const searchInput = document.getElementById('searchInput');
    const paginationControls = document.getElementById('paginationControls');

    let currentPage = 1;
    const limit = 10; // items per page
    let totalPages = 1;
    let currentSearch = '';

    async function fetchBookings(page = 1, search = '') {
      try {
        const res = await fetch(`/api/admin/bookings?page=${page}&limit=${limit}&search=${encodeURIComponent(search)}`);
        if (!res.ok) throw new Error('Failed to fetch bookings.');

        const data = await res.json();
        totalPages = data.totalPages || 1;
        currentPage = data.page || 1;

        renderBookings(data.bookings);
        renderPagination();
      } catch (err) {
        alert('Error loading bookings.');
        console.error(err);
      }
    }

    function renderBookings(bookings) {
      bookingsTableBody.innerHTML = '';

      if (bookings.length === 0) {
        bookingsTableBody.innerHTML = '<tr><td colspan="7">No bookings found.</td></tr>';
        return;
      }

      bookings.forEach(booking => {
        const row = document.createElement('tr');
        row.setAttribute('data-id', booking._id);

        row.innerHTML = `
          <td>${booking.user?.name || 'Unknown'}</td>
          <td>${booking.flight?.flightNumber || 'Unknown'}</td>
          <td>${booking.flight?.origin || 'Unknown'}</td>
          <td>${booking.flight?.destination || 'Unknown'}</td>
          <td>${booking.flight?.departureTime ? new Date(booking.flight.departureTime).toLocaleString() : 'Unknown'}</td>
          <td>${booking.seatsBooked || 1}</td>
          <td><button class="deleteBookingBtn">Delete</button></td>
        `;

        bookingsTableBody.appendChild(row);
      });

      // Attach delete handlers after rendering
      document.querySelectorAll('.deleteBookingBtn').forEach(button => {
        button.addEventListener('click', async (e) => {
          const row = e.target.closest('tr');
          const bookingId = row.getAttribute('data-id');

          if (confirm('Are you sure you want to delete this booking?')) {
            try {
              const res = await fetch(`/api/bookings/${bookingId}`, { method: 'DELETE' });
              if (res.ok) {
                alert('Booking deleted successfully.');
                fetchBookings(currentPage, currentSearch); // Refresh page data
              } else {
                const data = await res.json();
                alert('Failed to delete booking: ' + (data.message || 'Unknown error'));
              }
            } catch (err) {
              alert('Error deleting booking.');
              console.error(err);
            }
          }
        });
      });
    }

    // Pagination rendering function (Amazon-style compact)
    function renderPagination() {
      paginationControls.innerHTML = '';

      // Prev button
      const prevBtn = document.createElement('button');
      prevBtn.textContent = '‹';  // Left angle quote
      prevBtn.disabled = currentPage === 1;
      prevBtn.setAttribute('aria-label', 'Previous page');
      prevBtn.addEventListener('click', () => {
        if (currentPage > 1) fetchBookings(currentPage - 1, currentSearch);
      });
      paginationControls.appendChild(prevBtn);

      // Always show first page
      paginationControls.appendChild(createPageButton(1));

      let startPage = currentPage - 2;
      let endPage = currentPage + 2;

      if (startPage < 2) {
        endPage += (2 - startPage);
        startPage = 2;
      }
      if (endPage > totalPages - 1) {
        startPage -= (endPage - (totalPages - 1));
        endPage = totalPages - 1;
      }
      startPage = Math.max(startPage, 2);

      if (startPage > 2) {
        const ellipsisLeft = document.createElement('span');
        ellipsisLeft.textContent = '...';
        ellipsisLeft.className = 'ellipsis';
        paginationControls.appendChild(ellipsisLeft);
      }

      for (let i = startPage; i <= endPage; i++) {
        if (i > 1 && i < totalPages) {
          paginationControls.appendChild(createPageButton(i));
        }
      }

      if (endPage < totalPages - 1) {
        const ellipsisRight = document.createElement('span');
        ellipsisRight.textContent = '...';
        ellipsisRight.className = 'ellipsis';
        paginationControls.appendChild(ellipsisRight);
      }

      if (totalPages > 1) {
        paginationControls.appendChild(createPageButton(totalPages));
      }

      // Next button
      const nextBtn = document.createElement('button');
      nextBtn.textContent = '›';  // Right angle quote
      nextBtn.disabled = currentPage === totalPages;
      nextBtn.setAttribute('aria-label', 'Next page');
      nextBtn.addEventListener('click', () => {
        if (currentPage < totalPages) fetchBookings(currentPage + 1, currentSearch);
      });
      paginationControls.appendChild(nextBtn);
    }

    function createPageButton(page) {
      const btn = document.createElement('button');
      btn.textContent = page;
      btn.setAttribute('aria-label', `Go to page ${page}`);
      btn.className = page === currentPage ? 'active-page' : '';
      btn.disabled = page === currentPage;
      btn.addEventListener('click', () => fetchBookings(page, currentSearch));
      return btn;
    }

    // Search input with debounce
    let searchTimeout;
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        currentSearch = searchInput.value.trim();
        fetchBookings(1, currentSearch);
      }, 300);
    });

    // Initial fetch
    fetchBookings();
  </script>
</body>
</html>